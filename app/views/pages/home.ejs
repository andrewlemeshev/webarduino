<% layout('../layout') -%>
<div class="list-group menu">
  <a href="#" class="list-group-item disabled">
    cvwdmkvownnvdw
  </a>
  <a href="#" class="list-group-item">
    dwvvwvwvwvvdvwv
  </a>
</div>
<div id="panel" class="panel"></div>
<script type="text/javascript">
$( document ).ready(function() {
  var sourcePin, sourceElement;
  var arduinoElement = [];

  function Pins(pinName, pinType, pinX, pinY) {
    this.pinName = pinName;
    this.pinType = pinType;
    this.pinX = pinX;
    this.pinY = pinY;
    this.pinOut = null;
    this.pinIn = null;
  }

  function ArduinoElement(name, type, pinCount, pins, statement, statementXs, statementYs) {
    this.name = name;
    this.type = type;
    this.pinCount = pinCount;
    this.pins = pins;
    this.statement = statement;
    this.statementXs = statementXs;
    this.statementYs = statementYs;
    this.that = this;
  }

  var responceJson;
  console.log("ready");
  $.ajax({
    url: 'http://localhost:3000/getjson',
    method: 'POST',
    data: 'done',
    dataType: 'html'
  }).done(function (msg) {
    console.log('success');
    responceJson = JSON.parse(msg);//, function(k, v) {
      //console.log("k: "+k+" v: "+v);
    //});
    console.log(responceJson);
    var firstMeet = false;
    var appendArduino = '<a href="#" class="list-group-item disabled">Arduino</a>';
    var appendComponent = '<a href="#" class="list-group-item disabled">Components</a>'
    var arr = Object.keys(responceJson).map(function(k, v) {  return responceJson[k] });//console.log(k);console.log(v);

    for (var i = 0; i < arr.length; i++) {
      // = new Pins[arr[i].pinCount];
      var pins = [];
      var j=0;
      var prev;
      Object.keys(arr[i].pinNamesAndTypes).map(function(current, v) {
        if (arr[i].name == 'Arduino' && arr[i].type == 'Uno' && prev == '5V') {
          var pin = new Pins('GND', 'ground', arr[i].pinXs[j], arr[i].pinYs[j]);
          pins.push(pin);
          j++;
          var pin = new Pins('GND', 'ground', arr[i].pinXs[j], arr[i].pinYs[j]);
          pins.push(pin);
          j++;
        } //else {
          var pin = new Pins(current, arr[i].pinNamesAndTypes[current], arr[i].pinXs[j], arr[i].pinYs[j]);
          console.log(current+": "+arr[i].pinNamesAndTypes[current]);
          pins.push(pin);
          j++;
        //}
        prev = current;
      });
      //for (var j = 0; j < arr[i].pinCount; j++) {
      console.log("Pins: ");
      console.log(pins);
      //}
      arduinoElement.push(new ArduinoElement(arr[i].name, arr[i].type, arr[i].pinCount, pins, arr[i].statement, arr[i].statementXs, arr[i].statementYs));
      console.log("Element: ");
      console.log(arduinoElement);
      var menuName = arr[i].name==arr[i].type?(arr[i].name):(arr[i].name+' '+arr[i].type);
      if (arr[i].name == 'Arduino') appendArduino = appendArduino + '<a href="#" class="list-group-item" data="'+i+'">'
            + arr[i].name + ' ' + arr[i].type + '<img src="images/' + arr[i].statement.default + '"></a>';
      else appendComponent = appendComponent + '<a href="#" class="list-group-item" data="'+i+'">'
            + menuName + '<p><img src="images/' + arr[i].statement.default + '"></p></a>';
    }

    $(".menu").html(appendArduino+appendComponent);
    //var height = window.screen.availHeight * 0.9;
    //var width = window.screen.availWidth * 0.9;
    var style = {
      width: window.screen.availWidth * 0.85,
      height: window.screen.availHeight * 0.8
    }
    $("#panel").css(style);
    myPanel = new jsgl.Panel(document.getElementById("panel"));

    var z=2;
    $("a.list-group-item").filter(function(index) {
      return $(this).attr("class") != "disabled";
    }).on("click", function() {
      console.log(this);
      var myImage = myPanel.createImage();
      var index = $(this).attr("data");
      myImage.setUrl("images/" + arduinoElement[index].statement.default);
      //myImage.setHorizontalAnchor(jsgl.HorizontalAnchor.CENTER);
      //myImage.setVerticalAnchor(jsgl.VerticalAnchor.MIDDLE);
      //myImage.setSizeWH(200, 200);
      //myImage.setLocationXY(style.width/2+myImage.getWidth()/2, style.height/2+myImage.getHeight()/2);
      //console.log(myImage.getWidth());
      //if (arduinoElement[$(this).attr("data")].name != 'Arduino') myImage.setSizeWH()
      myPanel.addElement(myImage);
      myImage.setLocationXY(style.width/2-arduinoElement[index].statementXs[0]/2, style.height/2-arduinoElement[index].statementYs[0]/2);
      myImage.setSizeWH(arduinoElement[index].statementXs[0], arduinoElement[index].statementYs[0]);
      if (arduinoElement[index].name == 'Arduino') myImage.setZIndex(0);
      else myImage.setZIndex(z);
      z++;
      //console.log(myImage.getWidth());
      arduinoElement[index].imageOnPanel = myImage;
      arduinoElement[index].imageOnPanel.addMouseMoveListener(elementInteraction);
      arduinoElement[index].imageOnPanel.addMouseDownListener(elementInteraction);
      arduinoElement[index].imageOnPanel.addClickListener(elementInteraction);
      for (var i = 0; i < arduinoElement[index].pinCount; i++) {
        var pinReck = myPanel.createRectangle();
        //pinReck.setHorizontalAnchor(jsgl.HorizontalAnchor.CENTER);
        //pinReck.setVerticalAnchor(jsgl.VerticalAnchor.MIDDLE);
        pinReck.setLocationXY(arduinoElement[index].imageOnPanel.getX()+arduinoElement[index].pins[i].pinX,
                              arduinoElement[index].imageOnPanel.getY()+arduinoElement[index].pins[i].pinY);
        pinReck.setSizeWH(10, 10);
        if (arduinoElement[index].name == 'Arduino') pinReck.setZIndex(1);
        else pinReck.setZIndex(z);
        pinReck.getFill().setColor("rgb(255,0,0)");
        pinReck.getFill().setOpacity(0.0);
        pinReck.getStroke().setOpacity(0.0);
        arduinoElement[index].pins[i].reck = pinReck;
        arduinoElement[index].pins[i].reck.addMouseOverListener(pinInteraction);
        arduinoElement[index].pins[i].reck.addMouseOutListener(pinInteraction);
        arduinoElement[index].pins[i].reck.addMouseDownListener(pinInteraction);
        arduinoElement[index].pins[i].reck.addClickListener(pinInteraction);
        myPanel.addElement(arduinoElement[index].pins[i].reck);
      }
      z++;
    });

    function pinInteraction(eventArgs) {
      var choosen = false;
      switch(eventArgs.getEventType()) {
        case jsgl.MouseEvent.CLICK:
          sourcePin = eventArgs.getSourceElement();
          sourcePin.getFill().setOpacity(1.0);
          choosen = true;
          break;
        case jsgl.MouseEvent.DOWN:
          //sourcePin = eventArgs.getSourceElement();
          //sourcePin.getFill().setOpacity(1.0);
          //choosen = true;
          break;
        case jsgl.MouseEvent.UP:
          //text = "mouse up";
          break;
        case jsgl.MouseEvent.MOVE:
          //text = "mouse move";
          eventArgs.getSourceElement().getFill().setOpacity(1.0);
          break;
        case jsgl.MouseEvent.OVER:
          eventArgs.getSourceElement().getFill().setOpacity(1.0);
          break;
        case jsgl.MouseEvent.OUT:
          if (!choosen) eventArgs.getSourceElement().getFill().setOpacity(0.0);
          break;
      }
    }

    function elementInteraction(eventArgs) {
      switch(eventArgs.getEventType()) {
        case jsgl.MouseEvent.CLICK:
          sourceElement = null;
          break;
        case jsgl.MouseEvent.DOWN:
          sourceElement = eventArgs.getSourceElement();
          for (var i = 0; i < arduinoElement.length; i++) {
            if (sourceElement == arduinoElement[i].imageOnPanel) sourceElement.parent = arduinoElement[i];
          }
          choosen = true;
          break;
        case jsgl.MouseEvent.UP:
          //text = "mouse up";
          break;
        case jsgl.MouseEvent.MOVE:
          //text = "mouse move";
          if (sourceElement != null) {
            sourceElement.setLocationXY(eventArgs.getX()-sourceElement.getWidth()/2, eventArgs.getY()-sourceElement.getHeight()/2);
            for (var i = 0; i < sourceElement.parent.pinCount; i++) {
              sourceElement.parent.pins[i].reck.setLocationXY(sourceElement.getX()+sourceElement.parent.pins[i].pinX,
                                                              sourceElement.getY()+sourceElement.parent.pins[i].pinY);
            }
          }
          break;
        case jsgl.MouseEvent.OVER:
          break;
        case jsgl.MouseEvent.OUT:
          break;
      }
    }
    //var element = {

    //};

    /*var source;

    var taked = function(eventArgs) {
      source = eventArgs.getSourceElement();
      //if (eventArgs.getEventType() == jsgl.MouseEvent.MOVE)
        source.setCenterLocationXY(eventArgs.getX(), eventArgs.getY());
      label.setText("Clicked");
    }

    var moving = function(eventArgs) {
      if (source != null) source.setLocationXY(eventArgs.getX(), eventArgs.getY());
      circle.setCenterLocationXY(eventArgs.getX(), eventArgs.getY());
      label.setText("Moving: "+eventArgs.getX() + "" + eventArgs.getY());
    }

    var mouseUp = function(eventArgs) {
      source = null;
      //if (eventArgs.getEventType() == jsgl.MouseEvent.MOVE)
      //  source.setLocationXY(eventArgs.getX(), eventArgs.getY());
      label.setText("Not clicked");
    }

    var func = function(eventArgs) {
      var text;
      switch(eventArgs.getEventType()) {
        case jsgl.MouseEvent.CLICK:
          source = null;
          text = "click: ";
          break;
        case jsgl.MouseEvent.DOWN:
          source = eventArgs.getSourceElement();
          text = "down: ";
          break;
        case jsgl.MouseEvent.MOVE:
          if (source != null) {
            if (source instanceof jsgl.elements.CircleElement) source.setCenterLocationXY(eventArgs.getX(), eventArgs.getY());
            else if (source instanceof jsgl.elements.LabelElement) source.setLocationXY(eventArgs.getX(), eventArgs.getY());
          }
          text = "move: ";
          break;
        case jsgl.MouseEvent.OUT:
          source = null;
          text = "out: ";
          break;
      }
      label.setText(text+eventArgs.getX() + " " + eventArgs.getY());
    }

    circle.addMouseDownListener(func);
    circle.addMouseMoveListener(func);
    circle.addMouseOutListener(func);
    circle.addClickListener(func);
    label.addMouseDownListener(func);
    label.addMouseMoveListener(func);
    label.addMouseOutListener(func);
    label.addClickListener(func);*/
    //myPanel.addMouseDownListener(taked);
    //myPanel.addMouseMoveListener(moving);
    //myPanel.addClickListener(mouseUp);
    //circle.addClickListener(mouseUp);
    //polygon.addClickListener(mouseUp);
    //label.addClickListener(mouseUp);
    /*var handler = function(eventArgs) {
    var text;
    switch(eventArgs.getEventType()) {
      case jsgl.MouseEvent.CLICK:
        circle.setCenterLocationXY(eventArgs.getX(), eventArgs.getY());
        break;
      case jsgl.MouseEvent.DOWN:
        circle.setCenterLocationXY(eventArgs.getX(), eventArgs.getY());
        break;
    }
    label.setText(text + " (" + eventArgs.getX() + "," + eventArgs.getY() + ")");
  }*/
  });
});
</script>
